import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_paystack/flutter_paystack.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../app_style_resources.dart';


// To get started quickly, change this to your heroku deployment of
// https://github.com/PaystackHQ/sample-charge-card-backend
// Step 1. Visit https://github.com/PaystackHQ/sample-charge-card-backend
// Step 2. Click "Deploy to heroku"
// Step 3. Login with your heroku credentials or create a free heroku account
// Step 4. Provide your secret key and an email with which to start all test transactions
// Step 5. Replace {YOUR_BACKEND_URL} below with the url generated by heroku (format https://some-url.herokuapp.com)
String backendUrl = 'https://android.foodcourtng.co/app/pay_card.php';
// Set this to a public key that matches the secret key you supplied while creating the heroku instance
String paystackPublicKey = 'pk_live_d74f63cdc0e0d92e5deb45130a2b4a1a3473ea9b';
const String appName = 'MyUnicircle';

class Payments extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    return new PayeeClass();
  }
}



class PayeeClass extends StatefulWidget {


  @override
  _PayeeClass createState() => _PayeeClass();
}



class _PayeeClass extends State<PayeeClass> {


  final _scaffoldKey = new GlobalKey<ScaffoldState>();
  final _formKey = GlobalKey<FormState>();
  final _horizontalSizeBox = const SizedBox(width: 10.0);

  int _radioValue = 0;
  CheckoutMethod _method = CheckoutMethod.card;
  bool _inProgress = false;


  TextEditingController accController = new TextEditingController();
  TextEditingController phoneController = new TextEditingController();
  TextEditingController nameController = new TextEditingController();
  SharedPreferences sharedPreferences;
  String Phone ="" ,Email ="ctonclem@gmail.com",City,Area,Address,Name="",myCode,Verified = 'Verified';

  final f = new NumberFormat("#,###");




  @override
  void initState() {
    PaystackPlugin.initialize(publicKey: paystackPublicKey);
    super.initState();
  }



  @override
  Widget build(BuildContext context) {

    return new Scaffold(
      key: _scaffoldKey,
      body: new Container(
        padding: const EdgeInsets.all(20.0),
        child: new Form(
          key: _formKey,
          child: new SingleChildScrollView(
            child: new ListBody(
              children: <Widget>[

                SizedBox(
                  height: 30,
                ),
                InkWell(
                  onTap: () {
                    Navigator.pop(context);
                  },
                  child: Row(
                    children: <Widget>[
                      Icon(
                        Icons.arrow_back_ios,
                        color: Colors.pink,
                      ),
                      Text(
                        "Checkout",
                        style: largeText(Colors.pink),
                      )
                    ],
                  ),
                ),

                SizedBox(
                  height: 20,
                ),

                Center(
                  child: Text(
                    "Your data is 100% secure",
                    style: TextStyle(
                        color: Colors.black54,
                        fontFamily: "Roboto",
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                ),

                SizedBox(
                  height: 10,
                ),

                Center(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[

                      Image.asset("assets/images/logo_ng.png",width: 30,height: 30,),
                      Text(
                        "MyUniCircle PAY",
                        style: TextStyle(
                            color: Colors.pink,
                            fontFamily: "Roboto",
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            fontStyle: FontStyle.italic),
                      ),
                    ],
                  )
                ),



                Theme(
                  data: Theme.of(context).copyWith(
                    accentColor: green,
                    primaryColorLight: Colors.white,
                    primaryColorDark: navyBlue,
                    textTheme: Theme.of(context).textTheme.copyWith(
                          body2: TextStyle(
                            color: lightBlue,
                          ),
                        ),
                  ),
                  child: Builder(
                    builder: (context) {
                      return _inProgress
                          ? new Container(
                              alignment: Alignment.center,
                              height: 50.0,
                              child: Platform.isIOS
                                  ? new CupertinoActivityIndicator()
                                  : new CircularProgressIndicator(),
                            )
                          : new Column(
                              mainAxisSize: MainAxisSize.min,
                              children: <Widget>[

                                SizedBox(height: 10,),
//
//                                Verified != 'Verified' && Verified != null?
//                                Row(
//                                  children: <Widget>[
//
//                                    new SizedBox(
//                                      height: 40.0,
//                                    ),
//
//                                    Flexible(
//                                      child: Text(
//                                        "Pending Payment Error, verify to get your delivery",
//                                        style: largeText(Colors.red),
//                                      ),
//                                    ),
//
//                                    SizedBox(width: 5,),
//
//                                    Flexible(
//                                      child: GestureDetector(
//                                        child: Text(
//                                          "Verify Here",
//                                          style: largeText(Colors.blue),
//                                        ),
//                                        onTap: (){
//                                          _verifyOnServer(Verified);
//                                        },
//                                      ),
//                                    ),
//
//
//                                  ],
//                                ):Center(),

                                new SizedBox(
                                  height: 40.0,
                                ),


                                new Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: <Widget>[
                                    new Flexible(
                                      flex: 3,
                                      child: new DropdownButtonHideUnderline(
                                        child: new InputDecorator(
                                          decoration: const InputDecoration(
                                            border: OutlineInputBorder(),
                                            isDense: true,
                                            hintText: 'Checkout method',
                                          ),
                                          isEmpty: _method == null,
                                          child: new DropdownButton<
                                              CheckoutMethod>(
                                            value: _method,
                                            isDense: true,
                                            onChanged: (CheckoutMethod value) {
                                              setState(() {
                                                _method = value;
                                              });
                                            },
                                            items: banks.map((String value) {
                                              return new DropdownMenuItem<
                                                  CheckoutMethod>(
                                                value:
                                                    _parseStringToMethod(value),
                                                child: new Text(value),
                                              );
                                            }).toList(),
                                          ),
                                        ),
                                      ),
                                    ),
                                    _horizontalSizeBox,
                                    new Flexible(
                                      flex: 2,
                                      child: new Container(
                                        width: double.infinity,
                                        child: _getPlatformButton(
                                          'Pay Via Card',
                                          () => _handleCheckout(context),
                                        ),
                                      ),
                                    ),


                                  ],
                                )
                              ],
                            );
                    },
                  ),
                ),


                Padding(

                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: <Widget>[

                      Text("Total",style: smallText(Colors.black54),),
                      SizedBox(width: 10,),
                      Text("\$1" ,style: mediumText(Colors.black54),),
                    ],
                  ),
                ),


                FlatButton(
                  color: Colors.pink,
                  textColor: Colors.white,
                  child: Text("Pay"),
                  onPressed: () {
                    pay();
                  },
                )

              ],
            ),
          ),
        ),
      ),
    );
  }




  int calc_ranks(ranks) {
    double multiplier = .5;
    return (multiplier * ranks).round();
  }

  _handleCheckout(BuildContext context) async {
    pay();
  }

  _startAfreshCharge() async {
    _formKey.currentState.save();

    Charge charge = Charge();
    charge.card = null;

    setState(() => _inProgress = true);

    if (_isLocal) {
      // Set transaction params directly in app (note that these params
      // are only used if an access_code is not set. In debug mode,
      // setting them after setting an access code would throw an exception

      int prices = int.parse("100");
      double percent = prices * 0.015;
      double total = (prices + percent) * 100;
      int total1 = total.round();

      charge
        ..amount = total1 // In base currency
        ..email = Email
        ..reference = _getReference()
        ..putCustomField('Charged From', 'FoodCourtNG');
      _chargeCard(charge);
    } else {
      // Perform transaction/initialize on Paystack server to get an access code
      // documentation: https://developers.paystack.co/reference#initialize-a-transaction
      charge.accessCode = await _fetchAccessCodeFrmServer(_getReference());
      _chargeCard(charge);
    }
  }

  _chargeCard(Charge charge) {
    // This is called only before requesting OTP
    // Save reference so you may send to server if error occurs with OTP
    handleBeforeValidate(Transaction transaction) {
      _updateStatus(transaction.reference, 'validating...');
    }

    handleOnError(Object e, Transaction transaction) {
      // If an access code has expired, simply ask your server for a new one
      // and restart the charge instead of displaying error
      if (e is ExpiredAccessCodeException) {
        _startAfreshCharge();
        _chargeCard(charge);
        return;
      }

      if (transaction.reference != null) {
        _verifyOnServer(transaction.reference);
      } else {
        setState(() => _inProgress = false);
        _updateStatus(transaction.reference, e.toString());
      }
    }

    // This is called only after transaction is successful
    handleOnSuccess(Transaction transaction) {
      _verifyOnServer(transaction.reference);
    }

    PaystackPlugin.chargeCard(context,
        charge: charge,
        beforeValidate: (transaction) => handleBeforeValidate(transaction),
        onSuccess: (transaction) => handleOnSuccess(transaction),
        onError: (error, transaction) => handleOnError(error, transaction));
  }

  String _getReference() {
    String platform;
    if (Platform.isIOS) {
      platform = 'iOS';
    } else {
      platform = 'Android';
    }

    return 'ChargedFrom${platform}_${DateTime.now().millisecondsSinceEpoch}';
  }



  Widget _getPlatformButton(String string, Function() function) {
    // is still in progress
    Widget widget;
    if (Platform.isIOS) {
      widget = new CupertinoButton(
        onPressed: function,
        padding: const EdgeInsets.symmetric(horizontal: 15.0),
        color: CupertinoColors.activeGreen,
        child: new Text(
          string,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
      );
    } else {
      widget = new RaisedButton(
        onPressed: function,
        color: Colors.green,
        textColor: Colors.white,
        padding: const EdgeInsets.symmetric(vertical: 13.0, horizontal: 10.0),
        child: new Text(
          string.toUpperCase(),
          style: const TextStyle(fontSize: 17.0),
        ),
      );
    }
    return widget;
  }

  Future<String> _fetchAccessCodeFrmServer(String reference) async {
    String url = '$backendUrl/new-access-code';
    String accessCode;
    try {
      print("Access code url = $url");
      http.Response response = await http.get(url);
      accessCode = response.body;
      print('Response for access code = $accessCode');
    } catch (e) {
      setState(() => _inProgress = false);
      _updateStatus(
          reference,
          'There was a problem getting a new access code from'
          ' the backend: $e');
    }

    return accessCode;
  }



  void _verifyOnServer(String reference) async {
    _updateStatus2(reference, 'Verifying your transaction...........');

    var data43 = {
      "reference": reference,
      "phone": Phone
    };
    try {
      http.Response response = await http.post(backendUrl,body: data43);
      var body = response.body;

      if(response.statusCode == 200) {
        if (response.body.contains("Successfully")) {
          print("Paid In Full");
          print(body);
          var code = response.body.toString().split("/");
          var accesCode = code[1];
          print(accesCode);
          sharedPreferences.setString("accessCode",accesCode);

        }
      }else{
        _updateStatus(reference,"Error, Click on Pay Now Again ");
      }
    } catch (e) {
      _updateStatus(reference,"Error, Click on Pay Now Again ");
    }
    setState(() => _inProgress = false);
  }



  String payRef(){
    String ref = "";
    var rng = new Random();
    for (var i = 0; i < 10; i++) {
      print(rng.nextInt(1000));

    }
  }

  void _payAgain(String reference) async {

    _updateStatus2(reference, 'Making Payment...........');

    int prices = int.parse("100");
    double percent = prices * 0.015;
    double total = (prices + percent) * 100;
    int total1 = total.round();

    var data12 = {
      "Email": Email,
      "Auth": myCode,
      "Phone": Phone,
      "Amount": total1.toString(),
      "Reference": _getReference(),
    };


    try {
      http.Response response = await http.post("",body: data12);
      var body = response.body;
      print(body);
      if(response.statusCode == 200) {
        if (response.body.contains("Charge attempted")) {
          _updateStatus2(reference, 'Bank Network Failure, please wait & try again .......');
        }
        else if (response.body.contains("Successfully")) {
          print("Paid Again");
          print(body);
          var code = response.body.toString().split("/");
          var accesCode = code[1];
          print(accesCode);
          sharedPreferences.setString("accessCode",accesCode);

        }else if (response.body.contains("Transaction was unsuccessful")) {
          _updateStatus2(reference, 'You have insufficient funds .......');
        }
      }else{
        _updateStatus(reference,"Error Try Again");
      }
    } catch (e) {
      _updateStatus(reference,"Error, Click on Pay Now Again ");
    }
    setState(() => _inProgress = false);
  }



  _updateStatus(String reference, String message) {
    _showMessage('Reference: $reference \n\ Response: $message',
        const Duration(seconds: 7));
  }


  _updateStatus2(String reference, String message) {
    _showMessage('Please Wait \n$message',
        const Duration(seconds: 90));
  }

  _showMessage(String message,
      [Duration duration = const Duration(seconds: 4)]) {
    _scaffoldKey.currentState.showSnackBar(new SnackBar(
      content: new Text(message),
      duration: duration,
      action: new SnackBarAction(
          label: 'CLOSE',
          onPressed: () => _scaffoldKey.currentState.removeCurrentSnackBar()),
    ));
  }

  bool get _isLocal => _radioValue == 0;




  void pay() async{

    PaystackPlugin.initialize(publicKey: paystackPublicKey);

    int total = 389 * 1000;
    setState(() => _inProgress = true);
    _formKey.currentState.save();
    Charge charge = Charge()
      ..amount = total // In base currency
      ..email = Email
      ..card = null;

    charge.reference = _getReference();

//    if (!_isLocal) {
//      var accessCode = await _fetchAccessCodeFrmServer(_getReference());
//      charge.accessCode = accessCode;
//    } else {
//
//    }

    try {
      CheckoutResponse response = await PaystackPlugin.checkout(
        context,
        method: _method,
        charge: charge,
        fullscreen: false,
        logo: MyLogo(),
      );
      print('Response = $response');


      setState(() => _inProgress = false);

      if(response.message.contains("Success")){


        var card =  response.card;
        sharedPreferences.setString("LastDigits", card.last4Digits);
        sharedPreferences.setString("Reference",response.reference);
        _verifyOnServer(response.reference);

      }


    } catch (e) {
      setState(() => _inProgress = false);
      //_showMessage("Check console for error");
      rethrow;
    }
  }











  _showMessageBank(String message,
      [Duration duration = const Duration(seconds: 4)]) {
    _scaffoldKey.currentState.showSnackBar(new SnackBar(
      content: new Text(message),
      duration: duration,
      action: new SnackBarAction(
          label: 'CLOSE',
          onPressed: () => _scaffoldKey.currentState.removeCurrentSnackBar()),
    ));
  }




  void _showBottomSheetAdded() {
    showModalBottomSheet(context: context, builder: (context2){
      return Container(
        color: Color(0xFF313131),
        padding: EdgeInsets.all(15),
        height: 200,
        child: Container(
          decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.all(Radius.circular(30))
          ),
          child: Column(
            children: <Widget>[
              SizedBox(height: 10,),

              Text("Added Successfully ......... ",style: TextStyle(decoration: TextDecoration.none,fontSize: 20,fontFamily: "Roboto",fontWeight: FontWeight.w300),),
             // Text("Go back and tap on Get Loan ......... ",style: largeTextStyle(appColor1)),
              SizedBox(height: 10,),


              FlatButton(
                onPressed: () {

                  Navigator.pop(context2);
                  Navigator.pop(context);

                },
                color: appColor1,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10)),
                child: Text(
                  "Go Back",
                  style: mediumText(Colors.white),
                ),
              ),
            ],
          ),
        ),
      );
    });
  }


}





var banks = ['Card'];

CheckoutMethod _parseStringToMethod(String string) {
  CheckoutMethod method = CheckoutMethod.selectable;
  switch (string) {
    case 'Bank':
      method = CheckoutMethod.bank;
      break;
    case 'Card':
      method = CheckoutMethod.card;
      break;
  }
  return method;
}

class MyLogo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: Colors.black,
      ),
      alignment: Alignment.center,
      padding: EdgeInsets.all(10),
      child: Text(
        "MUC",
        style: TextStyle(
          color: Colors.white,
          fontSize: 13,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}

const Color green = const Color(0xFF3db76d);
const Color lightBlue = const Color(0xFF34a5db);
const Color navyBlue = const Color(0xFF031b33);
